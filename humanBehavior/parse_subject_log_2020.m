% Parse the _SubjectLog.xlsx file, of human MST data.
% 
% - The data were collected using the MST app (v.0.80), 
% provided by the Stark lab: https://faculty.sites.uci.edu/starklab/mnemonic-similarity-task-mst/
% on a Mac Airbook.
% 
% - Lists of random 4-character identifiers (SEED), and corresponding folder trees, were created using MakeRandomSubjectIDs.m
% This also creates patternsepvariables_list.txt, which should be converted to Excel format and used as the main log file
% during testing of subjects. This script (parse_subject_log.m) will read the Excel file and collate the data. 
% 
% - An example Subject Data folder tree is provided. During testing, the
% SEED in the MST app should be set to the next unused 4-character SEED, and
% the text output file should be placed in the corresponding folder. The Subject_Log
% file should be placed at the top of this folder tree.
% 
% The entries in the log file are taken from the neuropsych test battery
% used by the Hermann lab at UW-Madison Neurology, during routine workup of
% epilepsy patients admitted to the UW Epilepsy Monitoring Unit. The
% acronyms are described in patternsepvariables.docx. 
% 
% NOTE1: In the Subject Log, the ID field is used to distinguish between control and epilepsy subjects by 
% appending '-c' after each control subject ID. This is not ideal, but it makes it much easier for the 
% person actually running the test on the subject to enter data in the spreadhseet quickly during the testing.
% ALL control subjects MUST have '-c' or '-C' immediately following their ID. Any subject lacking this will be 
% included in the epilepsy group during the analysis.
% 
% NOTE2: Any subject for whom the test was not finished, or for any other reason should not be analyzed
% should be designated with 'void' or 'VOID' in the ID field. Otherwise the script will probably throw an error.
% 
% The Subject Log can be tailored to your own requirements as follows (this is untested, but I think it should work):
% 1) First, edit patternsepvariables_list.txt so that it only contains the variables you want to track.
% 2) Run MakeRandomSubjectIDs.m to create a new Subject Log file and folder tree. 
% 4) Open the Subject Log txt file in MS Excel and re-save it in Excel format (*.xlsx).
% 5) Run the Matlab Import Wizard on the Subject Log .xlsx file and choose "Generate Script" from the Import Selection menu.
% 6) Copy that script and paste it below, to replace everything from "Import data from spreadsheet" through "Clear temporary variables".
% 7) In the line that starts "SubjectLog = readtable(", replace the hard-coded filestring with the variable: xlsfilespec.
% 8) Edit the section "Output a readable table with only necessary information" below to only include your variables.
% 
% Matt Jones, 2017-2020

clear all
close all

[xlsxfilename, xlsxfilepath] = uigetfile('*.xlsx', 'Load a SubjectLog.xlsx file:');
xlsfilespec = [xlsxfilepath xlsxfilename];
cd(xlsxfilepath)
% xlsfilespec = '/Users/jonesmat/Documents/DATA/Behavior/Human PatSep/Data & Analysis/Subject Data 01-18-17/_SubjectLog.xlsx';


%% Import data from spreadsheet
% Script for importing data from the following spreadsheet:
%
%    Workbook: /Users/jonesmat/Documents/DATA/Behavior/Human PatSep/Data & Analysis/Subject Data 01-18-17/_SubjectLog.xlsx
%    Worksheet: _SubjectLog
%
% To extend the code for use with different selected data or a different
% spreadsheet, generate a function instead of a script.

% Auto-generated by MATLAB on 2017/01/19 19:14:08

%% Import the data
[~, ~, raw] = xlsread(xlsfilespec,'_SubjectLog');
raw = raw(2:end,:);
raw(cellfun(@(x) ~isempty(x) && isnumeric(x) && isnan(x),raw)) = {''};
cellVectors = raw(:,[1,2,3,4,5,16,18,21,23,24,27,29,30,31,32,33,34,35,36,37,38,39,41,42,47,52]);
raw = raw(:,[6,7,8,9,10,11,12,13,14,15,17,19,20,22,25,26,28,40,43,44,45,46,48,49,50,51]);

%% Replace non-numeric cells with NaN
R = cellfun(@(x) ~isnumeric(x) && ~islogical(x),raw); % Find non-numeric cells
raw(R) = {NaN}; % Replace non-numeric cells

%% Create output variable
data = reshape([raw{:}],size(raw));

%% Create table
SubjectLog = table;

%% Allocate imported array to column variable names
SubjectLog.SEED = cellVectors(:,1);
SubjectLog.ID = cellVectors(:,2);
SubjectLog.VarName3 = cellVectors(:,3);
SubjectLog.Interview = cellVectors(:,4);
SubjectLog.SUBNO = cellVectors(:,5);
SubjectLog.NP = data(:,1);
SubjectLog.GROUP = data(:,2);
SubjectLog.AGE = data(:,3);
SubjectLog.GENDER = data(:,4);
SubjectLog.RACE = data(:,5);
SubjectLog.HAND = data(:,6);
SubjectLog.DTINTRV = data(:,7);
SubjectLog.EDSP = data(:,8);
SubjectLog.EDYRS = data(:,9);
SubjectLog.ED = data(:,10);
SubjectLog.JOB = cellVectors(:,6);
SubjectLog.RELATION = data(:,11);
SubjectLog.MCOMOR = cellVectors(:,7);
SubjectLog.MCOMORA = data(:,12);
SubjectLog.MCOMORB = data(:,13);
SubjectLog.MCOMORC = cellVectors(:,8);
SubjectLog.MEDS = data(:,14);
SubjectLog.MEDLIST = cellVectors(:,9);
SubjectLog.FAMNEU = cellVectors(:,10);
SubjectLog.FAMNEUA = data(:,15);
SubjectLog.FAMNEUB = data(:,16);
SubjectLog.FAMNEUC = cellVectors(:,11);
SubjectLog.MEDHX = data(:,17);
SubjectLog.VarName29 = cellVectors(:,12);
SubjectLog.Epilepsy = cellVectors(:,13);
SubjectLog.RECSEIZ = cellVectors(:,14);
SubjectLog.ONSETA = cellVectors(:,15);
SubjectLog.DURAT = cellVectors(:,16);
SubjectLog.SP = cellVectors(:,17);
SubjectLog.CP = cellVectors(:,18);
SubjectLog.SG = cellVectors(:,19);
SubjectLog.SZFRLIF = cellVectors(:,20);
SubjectLog.ACTEPI = cellVectors(:,21);
SubjectLog.AEDs = cellVectors(:,22);
SubjectLog.PAMED = data(:,18);
SubjectLog.VarName41 = cellVectors(:,23);
SubjectLog.Neuropsych = cellVectors(:,24);
SubjectLog.WRAT = data(:,19);
SubjectLog.FSIQ = data(:,20);
SubjectLog.NVSUM = data(:,21);
SubjectLog.NVLTS = data(:,22);
SubjectLog.NVREC = cellVectors(:,25);
SubjectLog.VSUM = data(:,23);
SubjectLog.VLTS = data(:,24);
SubjectLog.VREC = data(:,25);
SubjectLog.VFC = data(:,26);
SubjectLog.Narrative = cellVectors(:,26);

%% Clear temporary variables
clearvars data raw cellVectors R;

%% Find usable data
ID = SubjectLog.ID;
notemptyrows    = find( ~cellfun('isempty', ID) );                      % rows with an ID entry
notvoidrows     = strfind(lower(ID), 'void', 'ForceCellOutput', 0);     % rows NOT containing "void"
notvoidrows     = find(cellfun('isempty', notvoidrows));
validrows       = intersect(notemptyrows, notvoidrows);                 % rows with an entry and NOT marked void

controlrows     = strfind(lower(ID), '-c', 'ForceCellOutput', 0);       % rows designated as control subjects ('-C')
controlrows     = find(~cellfun('isempty', controlrows));
epilepsyrows    = setdiff(validrows, controlrows);                      % valid rows that are NOT control rows


%% Clean up the table (optional, and might lead to indexing confusion later)
% cleantable      = SubjectLog(validrows, :);
% controltable    = SubjectLog(controlrows, :);
% epilepsytable   = SubjectLog(epilepsyrows, :);



%% Dig up all the required MST data from individual subject log files
BiasValue = [];
for n = 1:length( validrows )
    row = validrows(n);
    disp(row)
% for n = 1
    subjectfoldername   = SubjectLog.SEED{row}

    logfilespec         = [xlsxfilepath subjectfoldername filesep 'MSTlog_' subjectfoldername '.txt'];
    fid                 = fopen(logfilespec, 'r');
    
    Header              = textscan(fid,'%s',12,'Delimiter','\n');
    
%     Quick scan to the end - REPLACE this with more specific code for finding specific items of info
    goflag = 1;
    linecount = 0;
    while goflag
        linecount = linecount + 1;
%         disp(linecount)
        linetxt              = textscan(fid,'%s',1,'Delimiter','\n');
        if ~cellfun( 'isempty', strfind(linetxt{:}, 'Bias metric (S|L-S|F):', 'ForceCellOutput', 0) );    % Search for the label of the bias metric line
            goflag = 0;
            goodtxt = char( linetxt{:} );
        end    
    end
    colonposition = strfind(goodtxt, ':', 'ForceCellOutput', 0);
    
    BiasValue(row)          = str2num( goodtxt(colonposition+1:end) );
    subjectAge(row)        	= SubjectLog.AGE(row);
    subjectGender(row)    	= SubjectLog.GENDER(row);
    
    disp(goodtxt)
%     pause

    fclose(fid);
end    

%% PatSep Bias
BiasData = [BiasValue(controlrows)'; BiasValue(epilepsyrows)'];
ctrllabels = repmat('C', length(controlrows), 1);
epillabels = repmat('E', length(epilepsyrows), 1);
grouplabels = [ctrllabels; epillabels];
% boxplot( BiasData , grouplabels)
    [Pk_Bias,Ktbl,Kstats] = kruskalwallis(BiasData, grouplabels);
    STATS.DiscrimIndex.KW.Pk_Bias = Pk_Bias;
    STATS.DiscrimIndex.KW.Ktbl = Ktbl;
    STATS.DiscrimIndex.KW.Kstats = Kstats;

%% Age
AgeData = [subjectAge(controlrows)'; subjectAge(epilepsyrows)'];
% boxplot( BiasData , grouplabels)
    [Pk_Age,Ktbl,Kstats] = kruskalwallis(AgeData, grouplabels);
    STATS.Age.KW.Pk_Age = Pk_Age;
    STATS.Age.KW.Ktbl = Ktbl;
    STATS.Age.KW.Kstats = Kstats;    

%% Gender
GenderData = [subjectGender(controlrows)'; subjectGender(epilepsyrows)'];
% boxplot( BiasData , grouplabels)
    [Pk_Gender,Ktbl,Kstats] = kruskalwallis(GenderData, grouplabels);
    STATS.Gender.KW.Pk_Gender = Pk_Gender;
    STATS.Gender.KW.Ktbl = Ktbl;
    STATS.Gender.KW.Kstats = Kstats;   




%%
figure('units', 'inch', 'pos', [0, 0, 7.5 10])
axes('units', 'norm', 'pos', [ 0.1 0.6 , 0.3, 0.3])
    ctrlBiasValue = BiasValue(controlrows);
    epilBiasValue = BiasValue(epilepsyrows);
    [Ht, Pt, CI, stats] = ttest2(ctrlBiasValue,epilBiasValue);
    STATS.DiscrimIndex.ttest.Ht = Ht;
    STATS.DiscrimIndex.ttest.Pt = Pt;
    STATS.DiscrimIndex.ttest.CI = CI;  
    STATS.DiscrimIndex.ttest.stats = stats;      
        bar( 1, mean(ctrlBiasValue), 'w', 'linewidth', 2); hold on
        errorbar( 1, mean(ctrlBiasValue), std(ctrlBiasValue)./sqrt(length(controlrows)), 'k', 'markerfacecolor', 'k', 'linewidth', 6);
        bar( 2, mean(epilBiasValue), 'w', 'edgecolor', 'r', 'linewidth', 2)
        plot( ones(size(controlrows)), ctrlBiasValue, 'ko', 'markersize', 8)
        errorbar( 2, mean(epilBiasValue), std(epilBiasValue)./sqrt(length(epilepsyrows)), 'r', 'markerfacecolor', 'r', 'linewidth', 6)
        plot(2.*ones(size(epilepsyrows)), epilBiasValue, 'ro', 'markersize', 8); 
        set(gca, 'xlim', [0 3], 'ylim', [-10 70], 'xtick', [0:3], 'xticklabels', strvcat('.', 'Control', '  TLE', '.'), 'fontname', 'arial', 'fontsize', 18)
        box off
        ylabel('Discrimination Index', 'fontname', 'arial', 'fontsize', 18)
        text(1.6, 45, {['p ? ' num2str(Pt, '%2.2f')]; 't-test'}, 'fontname', 'arial', 'fontsize', 12,  'color', 'r')

axes('units', 'norm', 'pos', [ 0.55 0.62 , 0.3, 0.275])
    bins = -10:100;
    ctrlhist = hist(ctrlBiasValue, bins);
    epilhist = hist(epilBiasValue, bins);
    ctrlcdf = cumsum(ctrlhist)./sum(ctrlhist);
    epilcdf = cumsum(epilhist)./sum(epilhist);
    plot(bins, ctrlcdf, 'k:', bins, epilcdf, 'r-', 'linewidth', 2); 
    set(gca, 'xlim', [-10 70], 'fontname', 'arial', 'fontsize', 18)
    xlabel('Discrimination Index', 'fontname', 'arial', 'fontsize', 18)
    ylabel('Cumulative Probability', 'fontname', 'arial', 'fontsize', 18)
    box off
    lg = legend('Control', 'TLE', 'location', 'southeast');
    lg.Box = 'off'
    lg.FontSize = 14;
    text(0, 0.8, {['p ? ' num2str(Pk_Bias, '%2.2f')]; 'KW test'}, 'fontname', 'arial', 'fontsize', 12, 'color', 'r')

axes('units', 'norm', 'pos', [ 0.1 0.2 , 0.3, 0.3])
    ctrlsubjectAge = subjectAge(controlrows);
    epilsubjectAge = subjectAge(epilepsyrows);
    [Ht, Pt, CI, stats] = ttest2(ctrlsubjectAge,epilsubjectAge);
    STATS.Age.ttest.Ht = Ht;
    STATS.Age.ttest.Pt = Pt;
    STATS.Age.ttest.CI = CI;  
    STATS.Age.ttest.stats = stats;       
        bar( 1, mean(ctrlsubjectAge), 'w', 'linewidth', 2); hold on
        errorbar( 1, mean(ctrlsubjectAge), std(ctrlsubjectAge)./sqrt(length(controlrows)), 'k', 'markerfacecolor', 'k', 'linewidth', 6);
        bar( 2, mean(epilsubjectAge), 'w', 'edgecolor', 'r', 'linewidth', 2)
        plot( ones(size(controlrows)), ctrlsubjectAge, 'ko', 'markersize', 8)
        errorbar( 2, mean(epilsubjectAge), std(epilsubjectAge)./sqrt(length(epilepsyrows)), 'r', 'markerfacecolor', 'r', 'linewidth', 6)
        plot(2.*ones(size(epilepsyrows)), epilsubjectAge, 'ro', 'markersize', 8); 
        set(gca, 'xlim', [0 3], 'ylim', [-10 70], 'xtick', [0:3], 'xticklabels', strvcat('.', 'Control', '  TLE', '.'), 'fontname', 'arial', 'fontsize', 18)
        box off
        ylabel('Subject Age', 'fontname', 'arial', 'fontsize', 18)
        text(1.3, 65, {['p ? ' num2str(Pt, '%2.2f')]; 't-test'}, 'fontname', 'arial', 'fontsize', 12,  'color', 'r')

axes('units', 'norm', 'pos', [ 0.55 0.20 , 0.3, 0.3])
    ctrlMaleindx = find( subjectGender(controlrows) == 1);  % CHECK THIS TO MAKE SURE MALE & FEMALE ARE CORRECT
        dummy = BiasValue(controlrows);
        ctrlMaleBias = dummy(ctrlMaleindx);
    ctrlFemaleindx = find( subjectGender(controlrows) == 2);  % CHECK THIS TO MAKE SURE MALE & FEMALE ARE CORRECT
        ctrlFemaleBias = dummy(ctrlFemaleindx);    
    epilMaleindx = find( subjectGender(epilepsyrows) == 1);  % CHECK THIS TO MAKE SURE MALE & FEMALE ARE CORRECT
        dummy = BiasValue(epilepsyrows);
        epilMaleBias = dummy(epilMaleindx);
    epilFemaleindx = find( subjectGender(epilepsyrows) == 2);  % CHECK THIS TO MAKE SURE MALE & FEMALE ARE CORRECT
        epilFemaleBias = dummy(epilFemaleindx);            
        
    plot(1, ctrlMaleBias, 'bo', 1, ctrlFemaleBias, 'mo', 'markersize', 8); hold on
    plot(2, epilMaleBias, 'bo', 2, epilFemaleBias, 'mo', 'markersize', 8); 
    set(gca, 'xlim', [0.5 2.5], 'ylim', [-10 70], 'xtick', [1 2], 'xticklabel', strvcat('Ctrl', 'TLE'), 'fontname', 'arial', 'fontsize', 18)
    text(1.2, 50, {'Gender Difference'; ['p ? ' num2str(Pk_Gender, '%2.2f')]; 'KW test'}, 'fontname', 'arial', 'fontsize', 12, 'color', 'r', 'interpreter', 'tex')
    ylabel('Discrimination Index', 'fontname', 'arial', 'fontsize', 18)

    box off

    
    
%%    
% print('HumanDataFig.epsf', '-depsc')




%% Output a readable table with only necessary information
SubjectLogOutputTable = table;
SubjectLogOutputTable.SEED          = SubjectLog.SEED( validrows );
SubjectLogOutputTable.SUBNO         = SubjectLog.SUBNO( validrows );
SubjectLogOutputTable.NP            = SubjectLog.NP( validrows );
SubjectLogOutputTable.GROUP         = SubjectLog.GROUP( validrows );
SubjectLogOutputTable.AGE           = SubjectLog.AGE( validrows );
SubjectLogOutputTable.GENDER        = SubjectLog.GENDER( validrows );
SubjectLogOutputTable.RACE          = SubjectLog.RACE( validrows );
SubjectLogOutputTable.HAND          = SubjectLog.HAND( validrows );
SubjectLogOutputTable.EDYRS         = SubjectLog.EDYRS( validrows );
SubjectLogOutputTable.ED            = SubjectLog.ED( validrows );
SubjectLogOutputTable.RELATION      = SubjectLog.RELATION( validrows );
SubjectLogOutputTable.WRAT          = SubjectLog.WRAT( validrows );
SubjectLogOutputTable.FSIQ          = SubjectLog.FSIQ( validrows );
SubjectLogOutputTable.NVSUM         = SubjectLog.NVSUM( validrows );
SubjectLogOutputTable.NVLTS         = SubjectLog.NVLTS( validrows );
SubjectLogOutputTable.NVREC         = SubjectLog.NVREC( validrows );
SubjectLogOutputTable.VSUM          = SubjectLog.VSUM( validrows );
SubjectLogOutputTable.VLTS          = SubjectLog.VLTS( validrows );
SubjectLogOutputTable.VREC          = SubjectLog.VREC( validrows );
SubjectLogOutputTable.VFC           = SubjectLog.VFC( validrows );
SubjectLogOutputTable.Narrative     = SubjectLog.Narrative( validrows );

SubjectLogOutputTable.DESCRIMINDX   = BiasValue( validrows )';

% Reorder columns
SubjectLogOutputTable = movevars(SubjectLogOutputTable,'DESCRIMINDX','After','SEED');

% Write the table to disk as an Excel spreadsheet

writetable(SubjectLogOutputTable, '_SubjectLogOutputTable.xlsx')










